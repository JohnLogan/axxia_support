From e0ea6154b263e2f01c38eb32f993b49c4a35df79 Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Wed, 7 Dec 2016 12:53:39 -0600
Subject: [PATCH] datalogger: The Axxia Test Case

Signed-off-by: John Jacques <john.jacques@intel.com>
---
 arch/arm64/boot/dts/intel/axm5616-victoria.dts |  16 ++
 arch/arm64/boot/dts/intel/axm56xx.dtsi         |  18 +-
 arch/arm64/configs/axxia_x9_defconfig          |   3 +
 drivers/irqchip/irq-gic-v3.c                   |  23 ++
 drivers/watchdog/Kconfig                       |   9 +
 drivers/watchdog/Makefile                      |   1 +
 drivers/watchdog/sp804_wdt_axxia.c             | 338 +++++++++++++++++++++++++
 7 files changed, 396 insertions(+), 12 deletions(-)
 create mode 100644 drivers/watchdog/sp804_wdt_axxia.c

diff --git a/arch/arm64/boot/dts/intel/axm5616-victoria.dts b/arch/arm64/boot/dts/intel/axm5616-victoria.dts
index 9c787b4..ac177eee 100644
--- a/arch/arm64/boot/dts/intel/axm5616-victoria.dts
+++ b/arch/arm64/boot/dts/intel/axm5616-victoria.dts
@@ -23,6 +23,18 @@
 		reg = <0 0x00000000 0 0x40000000>;
 	};
 
+        reserved-memory {
+                #address-cells = <2>;
+                #size-cells = <2>;
+                ranges;
+
+		datalogger_reserved: datalogger@30000000 {
+                        compatible = "datalogger";
+                        reg = <0 0x30000000 0 0x00020000>;
+                        no-map;
+                };
+        };
+
 	mmc_3v3: fixedregulator@0 {
 		compatible = "regulator-fixed";
 		regulator-name = "3V3";
@@ -205,3 +217,7 @@
 &trng {
 	status = "okay";
 };
+
+&watchdog0 {
+	status ="okay";
+};
diff --git a/arch/arm64/boot/dts/intel/axm56xx.dtsi b/arch/arm64/boot/dts/intel/axm56xx.dtsi
index e7741bc..58d6941 100644
--- a/arch/arm64/boot/dts/intel/axm56xx.dtsi
+++ b/arch/arm64/boot/dts/intel/axm56xx.dtsi
@@ -30,7 +30,7 @@
 		serial1   = &serial1;
 		serial2	  = &serial2;
 		serial3	  = &serial3;
-		timer	  = &timer0;
+		watchdog0 = &watchdog0;
 		ethernet0 = &nemac;
 		i2c0	  = &i2c0;
 		i2c1	  = &i2c1;
@@ -376,17 +376,11 @@
 				status = "disabled";
 			};
 
-			timer0: timer@8080220000 {
-				compatible = "arm,sp804", "arm,primecell";
-				reg = <0x80 0x80220000 0 0x10000>;
-				interrupts = <GIC_SPI 29 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 30 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 31 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 32 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 33 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 34 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 35 IRQ_TYPE_LEVEL_HIGH>,
-					     <GIC_SPI 36 IRQ_TYPE_LEVEL_HIGH>;
+			watchdog0: watchdog@0x80802200e0 {
+				compatible = "arm,sp804_wdt_axxia", "arm,primecell";
+				arm,primecell-periphid = <0x00141805>;
+				reg = <0x80 0x802200e0 0 0x1000>;
+				interrupts = <GIC_SPI 36 IRQ_TYPE_LEVEL_HIGH>;
 				clocks = <&clk_per 0>;
 				clock-names = "apb_pclk";
 			};
diff --git a/arch/arm64/configs/axxia_x9_defconfig b/arch/arm64/configs/axxia_x9_defconfig
index 351f391..e7108bf 100644
--- a/arch/arm64/configs/axxia_x9_defconfig
+++ b/arch/arm64/configs/axxia_x9_defconfig
@@ -131,6 +131,9 @@ CONFIG_GPIO_PL061=y
 CONFIG_GPIO_XGENE=y
 CONFIG_POWER_RESET_AXXIA=y
 # CONFIG_HWMON is not set
+CONFIG_WATCHDOG=y
+CONFIG_SOFT_WATCHDOG=y
+CONFIG_ARM_SP804_WATCHDOG_AXXIA=y
 CONFIG_REGULATOR=y
 CONFIG_REGULATOR_FIXED_VOLTAGE=y
 CONFIG_FB=y
diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
index 1dbae58..38d6fb2 100644
--- a/drivers/irqchip/irq-gic-v3.c
+++ b/drivers/irqchip/irq-gic-v3.c
@@ -388,6 +388,18 @@ static void __init gic_dist_init(void)
 	for (i = 32; i < gic_data.irq_nr; i += 32)
 		writel_relaxed(~0, base + GICD_IGROUPR + i / 8);
 
+#ifdef CONFIG_ARCH_AXXIA
+	/*
+	 * Part of an example of creating a crash log in memory on Axxia...
+	 *
+	 * Set the interrupt generated by timer 7 to secure group 0.  This
+	 * allows the secure monitor to handle this interrupt as an FIQ and
+	 * create the crash log in memory before the watchdog fires.
+	 */
+
+        writel_relaxed(0xffffffef, base + GICD_IGROUPR + 8);
+#endif
+
 	gic_dist_config(base, gic_data.irq_nr, gic_dist_wait_for_rwp);
 
 	/* Enable distributor with ARE, Group1 */
@@ -491,8 +503,19 @@ static void gic_cpu_init(void)
 
 	rbase = gic_data_rdist_sgi_base();
 
+#ifdef CONFIG_ARCH_AXXIA
+	/*
+	 * Part of an example of creating a crash log in memory on Axxia...
+	 *
+	 * Configure all PPIs and SGIs used by Linux as non-secure
+	 * group 1, others are secure group 0.
+	 */
+	writel_relaxed((0xffff0000 | ((1 << NR_IPI) - 1)),
+		       rbase + GICR_IGROUPR0);
+#else
 	/* Configure SGIs/PPIs as non-secure Group-1 */
 	writel_relaxed(~0, rbase + GICR_IGROUPR0);
+#endif
 
 	gic_cpu_config(rbase, gic_redist_wait_for_rwp);
 
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index e656736..e41e869 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -161,6 +161,15 @@ config ARM_SP805_WATCHDOG
 	  ARM Primecell SP805 Watchdog timer. This will reboot your system when
 	  the timeout is reached.
 
+config ARM_SP804_WATCHDOG_AXXIA
+	tristate "ARM SP804 Watchdog For Axxia"
+	depends on (ARM || ARM64) && ARM_AMBA
+	select WATCHDOG_CORE
+	help
+	  ARM Primecell SP804 Watchdog timer for Axxia device. This will reboot your system when
+	  the timeout is reached.
+
+
 config AT91RM9200_WATCHDOG
 	tristate "AT91RM9200 watchdog"
 	depends on SOC_AT91RM9200 && MFD_SYSCON
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index 59ea9a1..0fe72d7 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_USBPCWATCHDOG) += pcwd_usb.o
 
 # ARM Architecture
 obj-$(CONFIG_ARM_SP805_WATCHDOG) += sp805_wdt.o
+obj-$(CONFIG_ARM_SP804_WATCHDOG_AXXIA) += sp804_wdt_axxia.o
 obj-$(CONFIG_AT91RM9200_WATCHDOG) += at91rm9200_wdt.o
 obj-$(CONFIG_AT91SAM9X_WATCHDOG) += at91sam9_wdt.o
 obj-$(CONFIG_CADENCE_WATCHDOG) += cadence_wdt.o
diff --git a/drivers/watchdog/sp804_wdt_axxia.c b/drivers/watchdog/sp804_wdt_axxia.c
new file mode 100644
index 0000000..8a8fab2
--- /dev/null
+++ b/drivers/watchdog/sp804_wdt_axxia.c
@@ -0,0 +1,338 @@
+/*
+ * drivers/char/watchdog/sp804_wdt_axxia.c
+ *
+ * Watchdog driver for ARM SP804 watchdog module on Axxia evice
+ *
+ * John Logan <john.logan@intel.com>
+ * 
+ * Based on SP805 driver by Viresh Kumar
+ * Copyright (C) 2010 ST Microelectronics
+ * Viresh Kumar <viresh.linux@gmail.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2 or later. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/device.h>
+#include <linux/resource.h>
+#include <linux/amba/bus.h>
+#include <linux/bitops.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/kernel.h>
+#include <linux/math64.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/pm.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/types.h>
+#include <linux/watchdog.h>
+
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+
+/* default timeout in seconds */
+#define DEFAULT_TIMEOUT		17
+
+#define MODULE_NAME		"sp804_wdt_axxia"
+
+/* watchdog register offsets and masks */
+#define WDTLOAD			0x000
+#define LOAD_MIN	0x00000001
+#define LOAD_MAX	0xFFFFFFFF
+#define WDTVALUE		0x004
+#define WDTCONTROL		0x008
+/* control register masks */
+#define ONE_SHOT_MODE   (1 << 0)
+#define TIM_SIZE	(1 << 1)
+#define PRESCALE	(1 << 2)
+#define	INT_ENABLE	(1 << 5)
+#define	TIMER_MODE	(1 << 6)
+#define TIMER_ENABLE    (1 << 7)
+
+#define WDTINTCLR	0x00C
+#define WDTRIS		0x010
+#define WDTMIS		0x014
+#define INT_MASK	(1 << 0)
+
+
+/**
+ * struct sp804_wdt_axxia: sp804 wdt device structure
+ * @wdd: instance of struct watchdog_device
+ * @lock: spin lock protecting dev structure and io access
+ * @base: base address of wdt
+ * @clk: clock structure of wdt
+ * @adev: amba device structure of wdt
+ * @status: current status of wdt
+ * @load_val: load value to be set for current timeout
+ */
+struct sp804_wdt_axxia {
+	struct watchdog_device		wdd;
+	spinlock_t			lock;
+	void __iomem			*base;
+	struct clk			*clk;
+	struct amba_device		*adev;
+	unsigned int			load_val;
+};
+
+static bool nowayout = WATCHDOG_NOWAYOUT;
+module_param(nowayout, bool, 0);
+MODULE_PARM_DESC(nowayout,
+		 "Set to 1 to keep watchdog running after device release");
+
+/* This routine finds load value that will reset system in required timout */
+static int wdt_setload(struct watchdog_device *wdd, unsigned int timeout)
+{
+	struct sp804_wdt_axxia *wdt = watchdog_get_drvdata(wdd);
+	u64 load, rate;
+
+	rate = clk_get_rate(wdt->clk);
+
+
+	//printk("Wdt clk rate: %llu \n\r", rate);
+	//printk("Wdt timeout: %08u \n\r", timeout);
+
+	/*
+	 * sp805 runs counter with given value twice, after the end of first
+	 * counter it gives an interrupt and then starts counter again. If
+	 * interrupt already occurred then it resets the system. This is why
+	 * load is half of what should be required.
+
+	 * sp804 only runs counter once - when it times out, a reset occurs 
+	 */
+	load = rate * timeout - 1;
+
+	load = (load > LOAD_MAX) ? LOAD_MAX : load;
+	load = (load < LOAD_MIN) ? LOAD_MIN : load;
+
+	spin_lock(&wdt->lock);
+	wdt->load_val = load;
+	/* roundup timeout to closest positive integer value */
+	wdd->timeout = div_u64((load + 1) + (rate / 2), rate);
+	spin_unlock(&wdt->lock);
+
+	return 0;
+}
+
+/* returns number of seconds left for reset to occur */
+static unsigned int wdt_timeleft(struct watchdog_device *wdd)
+{
+	struct sp804_wdt_axxia *wdt = watchdog_get_drvdata(wdd);
+	u64 load, rate;
+
+	rate = clk_get_rate(wdt->clk);
+
+	spin_lock(&wdt->lock);
+	load = readl_relaxed(wdt->base + WDTVALUE);
+
+	spin_unlock(&wdt->lock);
+
+	return div_u64(load, rate);
+}
+
+static int wdt_config(struct watchdog_device *wdd, bool ping)
+{
+	struct sp804_wdt_axxia *wdt = watchdog_get_drvdata(wdd);
+	int ret;
+
+	if (!ping) {
+
+		ret = clk_prepare_enable(wdt->clk);
+		if (ret) {
+			dev_err(&wdt->adev->dev, "clock enable fail");
+			return ret;
+		}
+	}
+
+	spin_lock(&wdt->lock);
+
+	writel_relaxed(wdt->load_val, wdt->base + WDTLOAD);
+
+	if (!ping) {
+		writel_relaxed(INT_MASK, wdt->base + WDTINTCLR);
+		writel_relaxed(TIM_SIZE | INT_ENABLE | TIMER_MODE |
+			       TIMER_ENABLE, wdt->base + WDTCONTROL);
+	}
+
+	/* Flush posted writes. */
+	readl_relaxed(wdt->base + WDTCONTROL);
+	spin_unlock(&wdt->lock);
+
+	return 0;
+}
+
+static int wdt_ping(struct watchdog_device *wdd)
+{
+	return wdt_config(wdd, true);
+}
+
+/* enables watchdog timers reset */
+static int wdt_enable(struct watchdog_device *wdd)
+{
+	return wdt_config(wdd, false);
+}
+
+/* disables watchdog timers reset */
+static int wdt_disable(struct watchdog_device *wdd)
+{
+	struct sp804_wdt_axxia *wdt = watchdog_get_drvdata(wdd);
+
+	spin_lock(&wdt->lock);
+
+	writel_relaxed(0, wdt->base + WDTCONTROL);
+
+	/* Flush posted writes. */
+	readl_relaxed(wdt->base + WDTCONTROL);
+	spin_unlock(&wdt->lock);
+
+	clk_disable_unprepare(wdt->clk);
+
+	return 0;
+}
+
+/* interrupt handler code */
+
+static irqreturn_t sp804_wdt_axxia_irq(int irqno, void *param)
+{
+	printk("Wdt expired ! Should not reach this line! \n\r");
+
+	return IRQ_HANDLED;
+}
+
+static const struct watchdog_info wdt_info = {
+	.options = WDIOF_MAGICCLOSE | WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING,
+	.identity = MODULE_NAME,
+};
+
+static const struct watchdog_ops wdt_ops = {
+	.owner		= THIS_MODULE,
+	.start		= wdt_enable,
+	.stop		= wdt_disable,
+	.ping		= wdt_ping,
+	.set_timeout	= wdt_setload,
+	.get_timeleft	= wdt_timeleft,
+};
+
+static int
+sp804_wdt_axxia_probe(struct amba_device *adev, const struct amba_id *id)
+{
+	struct sp804_wdt_axxia *wdt;
+	int ret = 0;
+	unsigned int irq;
+
+	printk("Wdt: Probing sp804_wdt_axxia \n\r");
+
+	wdt = devm_kzalloc(&adev->dev, sizeof(*wdt), GFP_KERNEL);
+	if (!wdt) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	wdt->base = devm_ioremap_resource(&adev->dev, &adev->res);
+	if (IS_ERR(wdt->base))
+		return PTR_ERR(wdt->base);
+
+	wdt->clk = devm_clk_get(&adev->dev, NULL);
+	if (IS_ERR(wdt->clk)) {
+		dev_warn(&adev->dev, "Clock not found\n");
+		ret = PTR_ERR(wdt->clk);
+		goto err;
+	}
+
+	irq = adev->irq[0];
+
+	ret = devm_request_irq(&adev->dev, irq, sp804_wdt_axxia_irq, 0,
+			       dev_name(&adev->dev), wdt);
+	if (ret != 0) {
+		dev_err(&adev->dev, "failed to install irq (%d)\n", ret);
+		goto err;
+	}
+
+	wdt->adev = adev;
+	wdt->wdd.info = &wdt_info;
+	wdt->wdd.ops = &wdt_ops;
+	wdt->wdd.parent = &adev->dev;
+
+	spin_lock_init(&wdt->lock);
+	watchdog_set_nowayout(&wdt->wdd, nowayout);
+	watchdog_set_drvdata(&wdt->wdd, wdt);
+	wdt_setload(&wdt->wdd, DEFAULT_TIMEOUT);
+
+	ret = watchdog_register_device(&wdt->wdd);
+	if (ret) {
+		dev_err(&adev->dev, "watchdog_register_device() failed: %d\n",
+			ret);
+		goto err;
+	}
+	amba_set_drvdata(adev, wdt);
+
+	dev_info(&adev->dev, "registration successful\n");
+	return 0;
+
+err:
+	dev_err(&adev->dev, "Probe Failed!!!\n");
+	return ret;
+}
+
+static int sp804_wdt_axxia_remove(struct amba_device *adev)
+{
+	struct sp804_wdt_axxia *wdt = amba_get_drvdata(adev);
+
+	watchdog_unregister_device(&wdt->wdd);
+	watchdog_set_drvdata(&wdt->wdd, NULL);
+
+	return 0;
+}
+
+static int __maybe_unused sp804_wdt_axxia_suspend(struct device *dev)
+{
+	struct sp804_wdt_axxia *wdt = dev_get_drvdata(dev);
+
+	if (watchdog_active(&wdt->wdd))
+		return wdt_disable(&wdt->wdd);
+
+	return 0;
+}
+
+static int __maybe_unused sp804_wdt_axxia_resume(struct device *dev)
+{
+	struct sp804_wdt_axxia *wdt = dev_get_drvdata(dev);
+
+	if (watchdog_active(&wdt->wdd))
+		return wdt_enable(&wdt->wdd);
+
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(sp804_wdt_axxia_dev_pm_ops, sp804_wdt_axxia_suspend,
+			 sp804_wdt_axxia_resume);
+
+static struct amba_id sp804_wdt_axxia_ids[] = {
+	{
+		.id	= 0x00141805,
+		.mask	= 0x00ffffff,
+
+	},
+	{ 0, 0 },
+};
+
+MODULE_DEVICE_TABLE(amba, sp804_wdt_axxia_ids);
+
+static struct amba_driver sp804_wdt_axxia_driver = {
+	.drv = {
+		.name	= MODULE_NAME,
+		.pm	= &sp804_wdt_axxia_dev_pm_ops,
+	},
+	.id_table	= sp804_wdt_axxia_ids,
+	.probe		= sp804_wdt_axxia_probe,
+	.remove = sp804_wdt_axxia_remove,
+};
+
+module_amba_driver(sp804_wdt_axxia_driver);
+
+MODULE_AUTHOR("John Logan <john.logan@intel.com>");
+MODULE_DESCRIPTION("ARM SP804 Watchdog Driver For Axxia");
+MODULE_LICENSE("GPL");
-- 
2.5.2

